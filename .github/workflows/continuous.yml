# Because jobs can not depend on other workflows at the moment,
# this workflow combines the code quality checks with release actions.

name: Continuous Integration

on:
  push:
  pull_request:
  release:

jobs:

  # The helper provides information about the event that can be used later on
  helper:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - id: script
      uses: actions/github-script@v3
      with:
        script: |
          const fs = require('fs')

          const package = {
            node: fs.existsSync('package.json') && JSON.parse(fs.readFileSync('package.json')),
            composer: fs.existsSync('composer.json') && JSON.parse(fs.readFileSync('composer.json')),
          }

          let branchRef = ''
          if (process.env.GITHUB_EVENT_NAME === 'push') {
            branchRef = process.env.GITHUB_REF
          } else if (process.env.GITHUB_EVENT_NAME === 'pull_request') {
            branchRef = process.env.GITHUB_BASE_REF
          }
          const branchName = branchRef.startsWith('refs/heads/') && branchRef.substr(11)

          const branchIsMaintenance = /^\d+\.\d+$/.test(branchName)
          const branchIsMain = ['master', 'main'].includes(branchName)
          const branchIsDev = ['next', 'pre', 'alpha', 'beta', 'dev'].includes(branchName)

          return {
            package,
            branchName,
            branchIsMain,
            branchIsMaintenance,
            branchIsDev,
          }
    outputs:
      info: ${{ steps.script.outputs.result }}
      runCQNode: ${{ !!fromJson(steps.script.outputs.result).package.node }}
      runCQNodeLint: ${{ !!fromJson(steps.script.outputs.result).package.node.scripts.lint }}
      runCQNodeTest: ${{ !!fromJson(steps.script.outputs.result).package.node.scripts.test }}
      runCQComposer: ${{ !!fromJson(steps.script.outputs.result).package.composer }}
      runCQComposerLint: ${{ !!fromJson(steps.script.outputs.result).package.composer.scripts.lint }}
      runCQComposerTest: ${{ !!fromJson(steps.script.outputs.result).package.composer.scripts.test }}

  quality-node:
    name: "Code quality for node packages"
    needs: helper
    if: needs.helper.outputs.runCQNode == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: 12
    - run: yarn install --frozen-lockfile
    - if: needs.helper.outputs.runCQNodeLint == 'true'
      run: yarn run lint
    - if: needs.helper.outputs.runCQNodeTest == 'true'
      run: yarn run test

  quality-composer:
    name: "Code quality for composer packages"
    needs: helper
    if: needs.helper.outputs.runCQComposer == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - run: composer install
    - if: needs.helper.outputs.runCQComposerLint == 'true'
      run: composer lint
    - if: needs.helper.outputs.runCQComposerTest == 'true'
      run: composer test

  consumer:
    needs: helper
    runs-on: ubuntu-latest
    steps:
    - uses: actions/github-script@v3
      with:
        script: |
          console.log('!')
          console.log(process.env.test)
          console.log(process.env.test.package)
          console.log('!')
          console.log(process.env.expr)
          console.log(process.env.expr2)
          console.log(process.env.expr3)

      env:
        test: ${{needs.helper.outputs.info}}
        expr: ${{!!needs.helper.outputs.info}}
        expr2: ${{!!fromJson(needs.helper.outputs.info).package}}
        expr3: ${{!!fromJson(steps.script.outputs.result).package.node.scripts.test}}
